// https://scalameta.org/scalafmt/docs/configuration.html#commentswrap
version = "3.9.0"
maxColumn = 120
runner.dialect = scala3
assumeStandardLibraryStripMargin = true

trailingCommas = multiple

fileOverride {
  "glob:project/*.scala" {
    runner.dialect = scala213
  }
}
fileOverride {
  "glob:**/*.sbt" {
    runner.dialect = sbt1
  }
}
project {
  git = true
  includePaths."+" = ["glob:**.md"]
  excludeFilters = [
    ".metals"
  ]
}
project.excludePaths = ["glob:**/scalafix/input/**", "glob:**/scalafix/output/**"]


indent {
  caseSite = 4
}

align.preset = most
align {
  arrowEnumeratorGenerator = true
  closeParenSite = true
  openParenCallSite = true
  multiline = true
  allowOverflow = true
  stripMargin = true

  tokens = [
    caseArrow,
    { code = "{",  owner = "Template" }
    { code = "}",  owner = "Template" }
    { code = "%",  owner = applyInfix }
    { code = "%%", owner =  applyInfix }
    { code = "%%%",owner =  applyInfix }
    { code = "⇒",  owner = "Case" }
    { code = "->", owner = applyInfix }
    { code = "→",  owner = applyInfix }
    { code = "<-", owner = "Enumerator.Generator" }
    { code = "←",  owner = "Enumerator.Generator" }
    { code = "=",  owners = ["Defn.Val", "Defn.Type"] }
  ]

//  tokens = [
//    caseArrow,
//    { code = "{",  owner = "Template" }
//    { code = "}",  owner = "Template" }
//    { code = "%",  owner = applyInfix }
//    { code = "%%", owner =  applyInfix }
//    { code = "%%%",owner =  applyInfix }
//    { code = "->",  owner = applyInfix }
//    { code = ":=",  owner = applyInfix }
//    { code = ":=",  owner = "Def.Var" } // JsonObject def
//
//  ]
}

newlines {
  //implicitParamListModifierForce = [before]
  implicitParamListModifierPrefer = after
  alwaysBeforeElseAfterCurlyIf = true
  avoidInResultType = true
  beforeCurlyLambdaParams = multilineWithCaseOnly
  avoidForSimpleOverflow=[tooLong]

}

danglingParentheses {
  exclude = []
  callSite = true
}

rewrite {
  rules = [
    ##    PreferCurlyFors
    ##    RedundantBraces
    ##    RedundantParens
    SortModifiers
  ]
  sortModifiers {
    order = [
      final
      sealed
      abstract
      override
      implicit
      private
      protected
      lazy
    ]
  }
  scala3.insertEndMarkerMinLines = 30
}

binPack {
  literalArgumentLists = true
  parentConstructors = Oneline
  indentCallSiteSingleArg = false

  parentConstructors = Oneline
}

includeCurlyBraceInSelectChains = true
includeNoParensInSelectChains = true

continuationIndent {
  withSiteRelativeToExtends = 3
}

indentOperator {
  topLevelOnly = false
}

spaces {
  inImportCurlyBraces = true
  beforeContextBoundColon = Never
  inByNameTypes = true
  inInterpolatedStringCurlyBraces = false
  inParentheses = false

}

verticalMultiline {
  arityThreshold = 4
  atDefnSite = true
  newlineAfterOpenParen = false
}

optIn {
  encloseClassicChains = false
  breaksInsideChains = true
  breakChainOnFirstMethodDot = false
}

verticalMultiline {
    newlineAfterOpenParen = false
    arityThreshold = 100
    atDefnSite = false
}

comments {
  wrap = standalone
  wrapStandaloneSlcAsSlc = true
  wrapSingleLineMlcAsSlc = true
}

docstrings {
    wrapMaxColumn = 80
    style = SpaceAsterisk
    removeEmpty = true
    oneline = fold
    wrap = true
    blankFirstLine = true
    forceBlankLineBefore = true
}


  //align.treeCategory."Defn.Trait" = "class/object/trait/enum"
  //align.treeCategory."Defn.Object" = "class/object/trait/enum"
  //align.treeCategory."Defn.Val" = "given/val/var/def"
  //align.treeCategory."Defn.Enum" = "class/object/trait/enum"
  //align.treeCategory."Defn.Macro" = "given/val/var/def"
  //align.treeCategory."Decl.Def" = "given/val/var/def"
  //align.treeCategory."Defn.Def" = "given/val/var/def"
  //align.treeCategory."Defn.GivenAlias" = "given/val/var/def"
  //align.treeCategory."Defn.Var" = "given/val/var/def"
  //align.treeCategory."Enumerator.Generator" = for
  //align.treeCategory."Enumerator.Val" = for
  //align.treeCategory."Defn.Class" = "class/object/trait/enum"
